{"version":3,"sources":["../src/compile.process.ts"],"names":["key"],"mappings":"AAAA,OAAS,qBAAsB,GAAI,SAAY,YAC/C,OAAS,SAAU,cAAiB,cACpC,OAAS,SAAU,QAAS,KAAM,SAAU,YAAe,OAE3D,OAAS,YAAe,gBACxB,OAAO,UAAW,QAElB,IAAI,KAAO,MAAM,QAAQ,QAAQ,IAAI,CAAC,EAAE,UAAU,EAC9C,CAAC,MAAO,MAAM,EAAI,KAAK,EAE3B,GAAG,CAAC,MACH,MAAM,IAAI,qBAAqB,kBAAkB,EAClD,GAAG,CAAC,OACH,MAAM,IAAI,qBAAqB,6BAA6B,EAC7D,IAAI,UAAY,IAAI,IAChB,KAAQ,KAAK,MAAQ,QAAQ,IAAI,EAErC,OAAS,SAAS,KAAM,QAAQ,KAAM,MAAM,CAAC,EAC7C,MAAQ,SAAS,KAAM,QAAQ,KAAM,KAAK,CAAC,EAC3C,OAAS,KAAK,OAAQ,QAAQ,KAAK,EAAG,GAAG,SAAS,MAAO,MAAM,CAAC,IAAI,EACpE,OAAS,QAAQ,KAAM,MAAM,EAC7B,MAAQ,QAAQ,KAAM,KAAK,EAE3B,SAAS,cAAc,IAAY,CAClC,IAAI,KAAO,IAAI,MAAM,GAAG,EAErB,KAAK,CAAC,GAAK,MACb,KAAK,CAAC,EAAI,GAAG,SAAS,QAAQ,MAAM,EAAG,QAAQ,KAAK,CAAC,CAAC,IACvD,IAAI,KAAO,KAAK,IAAI,EAAG,MAAM,GAAG,EAEhC,KAAK,KAAK,KAAK,MAAM,CAAE,EAEvB,IAAI,KAAO,KAAK,KAAK,GAAG,EAExB,OAAI,UAAU,IAAI,IAAI,GACrB,UAAU,IAAI,KAAM,CAAC,CAAC,EACvB,UAAU,IAAI,IAAI,EAAG,KAAK,IAAI,EAEvB,SAAS,KAAK,KAAK,OAAS,CAAC,CAAC,EACtC,EAEC,gBAAgB,CAChB,IAAI,OAAS,MAAM,KAAK,OAAO,MAAM,SAAS,MAAO,MAAM,CAAC,EAExD,KAAO,KAAK,UAAU,OAAQ,CAAC,IAAK,QAAU,CACjD,GAAG,KAAO,iBACT,OAAO,MACR,GAAG,OAAO,OAAS,SAClB,OAAO,cAAc,KAAK,EAC3B,OAAQ,CAACA,KAAK,GAAG,IAAK,GAAG,QAAQ,KAAK,EACrC,MAAMA,IAAG,EAAI,cAAc,GAAa,EACzC,OAAO,KACR,EAAG,GAAI,EAEP,KAAO,KAAK,WAAW,oBAAqB,CAAC,KAAM,OAC3C,IACP,EAED,IAAI,QAAU,CAAC,EACX,MAAQ,CAAC,EAEb,OAAQ,CAAC,IAAK,KAAK,IAAK,UAAU,CACjC,IAAI,SAAW,SAAS,GAAG,EAE3B,QAAQ,QAAQ,MACf,MAAM,KAAK,UAAU,KAAK,KAAK,OAAS,CAAC,CAAC,MAAM,CAAC,SAAU,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,GAAG,EACjF,QAAQ,KAAK,eAAe,QAAQ,UAAU,GAAG,IAAI,CACtD,CAEA,IAAI,IAAM,CAAC,EAEX,IAAI,KAAK,GAAG,OAAO,EAEhB,QAAQ,QACV,IAAI,KAAK,EAAE,EACZ,IAAI,KAAK,GAAG,KAAK,EAEd,MAAM,QACR,IAAI,KAAK,EAAE,EACZ,IAAI,KAAK,kBAAkB,IAAI,GAAG,EAElC,MAAM,UAAU,OAAQ,IAAI,KAAK;AAAA,CAAI,EAAG,MAAM,CAC/C,GAAG","sourcesContent":["import { InvalidArgumentError, KV, Yaml } from 'js-common';\nimport { readFile, writeFile } from 'fs/promises';\nimport { basename, dirname, join, relative, resolve } from 'path';\n\nimport { hideBin } from 'yargs/helpers';\nimport yargs from 'yargs';\n\nlet args = yargs(hideBin(process.argv)).parseSync();\nlet [input, output] = args._ as string[];\n\nif(!input)\n\tthrow new InvalidArgumentError('Specify an input');\nif(!output)\n\tthrow new InvalidArgumentError('Specify an output directory');\nlet importMap = new Map<string, string[][]>();\nlet base = (args.base ?? process.cwd()) as string;\n\noutput = relative(base, resolve(base, output));\ninput = relative(base, resolve(base, input));\noutput = join(output, dirname(input), `${basename(input, 'yaml')}ts`);\noutput = resolve(base, output);\ninput = resolve(base, input);\n\nfunction resolveImport(imp: string){\n\tlet path = imp.split('/') as string[];\n\n\tif(path[0] == '.')\n\t\tpath[0] = `${relative(dirname(output), dirname(input))}`;\n\tlet type = path.pop()!.split('.');\n\n\tpath.push(type.shift()!);\n\n\tlet file = path.join('/');\n\n\tif(!importMap.has(file))\n\t\timportMap.set(file, []);\n\timportMap.get(file)!.push(type);\n\n\treturn `!impl:${type[type.length - 1]}`;\n}\n\n(async function(){\n\tlet config = await Yaml.decode(await readFile(input, 'utf8'));\n\n\tlet data = JSON.stringify(config, (key, value) => {\n\t\tif(key != 'implementation')\n\t\t\treturn value;\n\t\tif(typeof value == 'string')\n\t\t\treturn resolveImport(value);\n\t\tfor(let [key, val] of KV.entries(value))\n\t\t\tvalue[key] = resolveImport(val as string);\n\t\treturn value;\n\t}, '\\t');\n\n\tdata = data.replaceAll(/\"\\!impl:([^\"]+)\"/g, (arg0, arg1) => {\n\t\treturn arg1;\n\t});\n\n\tlet imports = [];\n\tlet types = [];\n\n\tfor(let [key, paths] of importMap){\n\t\tlet fileName = basename(key);\n\n\t\tfor(let type of paths)\n\t\t\ttypes.push(`import ${type[type.length - 1]} = ${[fileName, ...type].join('.')};`);\n\t\timports.push(`import * as ${fileName} from '${key}';`);\n\t}\n\n\tlet out = [];\n\n\tout.push(...imports);\n\n\tif(imports.length)\n\t\tout.push('');\n\tout.push(...types);\n\n\tif(types.length)\n\t\tout.push('');\n\tout.push(`export default ${data};`)\n\n\tawait writeFile(output, out.join('\\n'), 'utf8');\n})();"]}